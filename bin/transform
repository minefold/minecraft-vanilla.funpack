#!/usr/bin/env ruby

# encoding: ISO-8859-1

# usage: run | transform
# transforms server output to minefold friendly output

require 'time'
require 'json'

STDOUT.sync = true
STDIN.sync = true

HUMAN_FRIENDLY = ARGV.include?('-h')

# Events:
# started
# stopping
# player_connected      { playername: '..' }
# player_disconnected
# chatted
# opped
# deopped
# whitelist_added
# whitelist_removed
# banned
# pardoned
# info
# warning
# critical


def readable type, options={}
  "#{Time.now.utc.strftime('%Y-%b-%d %H:%M:%S')} [#{type}] " +
    options.map{|k,v| "#{k}=#{v.include?(' ') ? ("\"" + v + "\"") : v}"}.join(' ')
end

def json type, options={}
  args = {ts: Time.now.utc.iso8601, event: type }.merge(options)
  JSON.dump(args)
end

def event type, options = {}
  line = if HUMAN_FRIENDLY
    readable type, options
  else
    json type, options
  end
  puts line
end

lines = {
  :opped => [/(\w+): Opping (\w+)/, '\1 issued server command: op \2'],
  :deopped => [/(\w+): De-opping (\w+)/, '\1 issued server command: deop \2'],
  :whitelist_added => [/(\w+): Added (\w+) to white-list/, '\1 issued server command: whitelist add \2'],
  :whitelist_removed => [/(\w+): Removed (\w+) from white-list/, '\1 issued server command: whitelist remove \2'],
}

ARGF.each_line do |line|
  line = line.force_encoding('ISO-8859-1').
            gsub(/\e\[\d+m/, ''). # strip color sequences out
            gsub(/[\d-]+ [\d:]+ \[[A-Z]+\]\s/, '').strip  # strip message prefix
  # line =~ /(\d{2}:\d{2}:\d{2})\s\[(\w+)\]\s+(.*)/

  case
  when line.include?('Done (')
    sleep 2
    event 'started'

  when line == 'Stopping server'
    event 'stopping'

  when line =~ /^(\w+).*logged in with entity id/
    event 'player_connected', playername: $1

  when line =~ /^(\w+) lost connection: (.*)$/
    event 'player_disconnected', playername: $1, reason: $2

  else
    event 'info', msg: line.strip
  end
end
