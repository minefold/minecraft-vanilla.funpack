#!/usr/bin/env ruby
require 'json'
require 'erb'
require 'find'

$LOAD_PATH << File.expand_path('../../lib', __FILE__)

require 'template_context'

# usage: ./prepare <config>
# prepares the world to run

BINARIES = {
  'HEAD'    => 'https://s3.amazonaws.com/MinecraftDownload/launcher/minecraft_server.jar',
  '1.3.1'   => 'http://assets.minecraft.net/1_3_1/minecraft_server.jar',
  '12w21b'  => 'http://assets.minecraft.net/12w21b/minecraft_server.jar',
  '12w23b'  => 'http://assets.minecraft.net/12w23b/minecraft_server.jar',
  '12w38b'  => 'http://assets.minecraft.net/12w38b/minecraft_server.jar',
  '1.4-pre' => 'http://assets.minecraft.net/1_4_1/minecraft_server.jar'
}

root = File.expand_path('../..', __FILE__)

# Extract config

config_path = ARGV.shift

if File.exist?(config_path)
  config = JSON.parse(File.read(config_path))
else
  abort "#{config_path} doesn't exist"
end


# Download binary from Mojang

version = config['version'] || 'HEAD'

if BINARIES.has_key?(version)
  binary_url = BINARIES[version]
else
  abort "Unknown version #{version}"
end

system 'curl', '--silent', '--show-error', '-RL', binary_url, '-o', './server.jar'


# Write server.properties

level_name = Find.find('.').inject([]) do |paths, path|
  if File.basename(path) == 'level.dat'
    paths << File.basename(File.dirname(path))
  end
  paths
end.min

context = TemplateContext.new(config['settings'], level_name, config['port'])

template = ERB.new(
  File.read(File.join(root, 'templates', 'server.properties.erb'))
)

File.open('server.properties', 'w') do |f|
  f.puts template.result(context.binding)
end


# Write player lists

File.open('white-list.txt', 'w') do |f|
  f.puts config['settings']['whitelist']
end

File.open('ops.txt', 'w') do |f|
  f.puts config['settings']['ops']
end

File.open('banned-players.txt', 'w') do |f|
  f.puts config['settings']['banned']
end
